# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_clWRAP', [dirname(__file__)])
        except ImportError:
            import _clWRAP
            return _clWRAP
        if fp is not None:
            try:
                _mod = imp.load_module('_clWRAP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _clWRAP = swig_import_helper()
    del swig_import_helper
else:
    import _clWRAP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class CAObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CAObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _clWRAP.delete_CAObj
    __del__ = lambda self : None;
    def getObjectId(self): return _clWRAP.CAObj_getObjectId(self)
    def takeRef(self): return _clWRAP.CAObj_takeRef(self)
    def releaseRef(self): return _clWRAP.CAObj_releaseRef(self)
CAObj_swigregister = _clWRAP.CAObj_swigregister
CAObj_swigregister(CAObj)

class CAEngine(CAObj):
    __swig_setmethods__ = {}
    for _s in [CAObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CAEngine, name, value)
    __swig_getmethods__ = {}
    for _s in [CAObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CAEngine, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _clWRAP.delete_CAEngine
    __del__ = lambda self : None;
    def getObjectId(self): return _clWRAP.CAEngine_getObjectId(self)
    __swig_getmethods__["init"] = lambda x: _clWRAP.CAEngine_init
    if _newclass:init = staticmethod(_clWRAP.CAEngine_init)
    __swig_getmethods__["deInit"] = lambda x: _clWRAP.CAEngine_deInit
    if _newclass:deInit = staticmethod(_clWRAP.CAEngine_deInit)
    __swig_getmethods__["isInitialized"] = lambda x: _clWRAP.CAEngine_isInitialized
    if _newclass:isInitialized = staticmethod(_clWRAP.CAEngine_isInitialized)
CAEngine_swigregister = _clWRAP.CAEngine_swigregister
CAEngine_swigregister(CAEngine)

def CAEngine_init(strCredUserId="", strCredPassword=""):
  return _clWRAP.CAEngine_init(strCredUserId, strCredPassword)
CAEngine_init = _clWRAP.CAEngine_init

def CAEngine_deInit():
  return _clWRAP.CAEngine_deInit()
CAEngine_deInit = _clWRAP.CAEngine_deInit

def CAEngine_isInitialized():
  return _clWRAP.CAEngine_isInitialized()
CAEngine_isInitialized = _clWRAP.CAEngine_isInitialized

# This file is compatible with both classic and new-style classes.


