/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace org.doubango.clWRAP {

using System;
using System.Runtime.InteropServices;

class clWRAPPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("clWRAP", EntryPoint="SWIGRegisterExceptionCallbacks_clWRAP")]
    public static extern void SWIGRegisterExceptionCallbacks_clWRAP(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("clWRAP", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_clWRAP")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_clWRAP(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_clWRAP(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_clWRAP(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(clWRAPPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(clWRAPPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("clWRAP", EntryPoint="SWIGRegisterStringCallback_clWRAP")]
    public static extern void SWIGRegisterStringCallback_clWRAP(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_clWRAP(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static clWRAPPINVOKE() {
  }


  [DllImport("clWRAP", EntryPoint="CSharp_delete_CAObj")]
  public static extern void delete_CAObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAObj_getObjectId")]
  public static extern string CAObj_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAObj_takeRef")]
  public static extern int CAObj_takeRef(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAObj_releaseRef")]
  public static extern int CAObj_releaseRef(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingObj__SWIG_0")]
  public static extern IntPtr new_CASignalingObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingObj__SWIG_1")]
  public static extern IntPtr new_CASignalingObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingObj")]
  public static extern void delete_CASignalingObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingObj_unWrap")]
  public static extern IntPtr CASignalingObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingCallbackObj__SWIG_0")]
  public static extern IntPtr new_CASignalingCallbackObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingCallbackObj__SWIG_1")]
  public static extern IntPtr new_CASignalingCallbackObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingCallbackObj")]
  public static extern void delete_CASignalingCallbackObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallbackObj_unWrap")]
  public static extern IntPtr CASignalingCallbackObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingEventObj__SWIG_0")]
  public static extern IntPtr new_CASignalingEventObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingEventObj__SWIG_1")]
  public static extern IntPtr new_CASignalingEventObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingEventObj")]
  public static extern void delete_CASignalingEventObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEventObj_unWrap")]
  public static extern IntPtr CASignalingEventObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingCallEventObj__SWIG_0")]
  public static extern IntPtr new_CASignalingCallEventObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingCallEventObj__SWIG_1")]
  public static extern IntPtr new_CASignalingCallEventObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingCallEventObj")]
  public static extern void delete_CASignalingCallEventObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEventObj_unWrap")]
  public static extern IntPtr CASignalingCallEventObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASessionCallObj__SWIG_0")]
  public static extern IntPtr new_CASessionCallObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASessionCallObj__SWIG_1")]
  public static extern IntPtr new_CASessionCallObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASessionCallObj")]
  public static extern void delete_CASessionCallObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCallObj_unWrap")]
  public static extern IntPtr CASessionCallObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASessionCallIceCallbackObj__SWIG_0")]
  public static extern IntPtr new_CASessionCallIceCallbackObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASessionCallIceCallbackObj__SWIG_1")]
  public static extern IntPtr new_CASessionCallIceCallbackObj__SWIG_1(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASessionCallIceCallbackObj")]
  public static extern void delete_CASessionCallIceCallbackObj(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCallIceCallbackObj_unWrap")]
  public static extern IntPtr CASessionCallIceCallbackObj_unWrap(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CAEngine")]
  public static extern void delete_CAEngine(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_getObjectId")]
  public static extern string CAEngine_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_init")]
  public static extern bool CAEngine_init();

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_deInit")]
  public static extern bool CAEngine_deInit();

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_isInitialized")]
  public static extern bool CAEngine_isInitialized();

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setDebugLevel")]
  public static extern bool CAEngine_setDebugLevel(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setSSLCertificates__SWIG_0")]
  public static extern bool CAEngine_setSSLCertificates__SWIG_0(string jarg1, string jarg2, string jarg3, bool jarg4);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setSSLCertificates__SWIG_1")]
  public static extern bool CAEngine_setSSLCertificates__SWIG_1(string jarg1, string jarg2, string jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoPrefSize")]
  public static extern bool CAEngine_setVideoPrefSize(string jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoFps")]
  public static extern bool CAEngine_setVideoFps(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoBandwidthUpMax")]
  public static extern bool CAEngine_setVideoBandwidthUpMax(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoBandwidthDownMax")]
  public static extern bool CAEngine_setVideoBandwidthDownMax(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoMotionRank")]
  public static extern bool CAEngine_setVideoMotionRank(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoCongestionCtrlEnabled")]
  public static extern bool CAEngine_setVideoCongestionCtrlEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoJbEnabled")]
  public static extern bool CAEngine_setVideoJbEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoAvpfTail")]
  public static extern bool CAEngine_setVideoAvpfTail(int jarg1, int jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setVideoZeroArtifactsEnabled")]
  public static extern bool CAEngine_setVideoZeroArtifactsEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setAudioEchoSuppEnabled")]
  public static extern bool CAEngine_setAudioEchoSuppEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setAudioEchoTail")]
  public static extern bool CAEngine_setAudioEchoTail(int jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_addNattIceServer__SWIG_0")]
  public static extern bool CAEngine_addNattIceServer__SWIG_0(string jarg1, string jarg2, ushort jarg3, bool jarg4, bool jarg5, string jarg6, string jarg7);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_addNattIceServer__SWIG_1")]
  public static extern bool CAEngine_addNattIceServer__SWIG_1(string jarg1, string jarg2, ushort jarg3, bool jarg4, bool jarg5, string jarg6);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_addNattIceServer__SWIG_2")]
  public static extern bool CAEngine_addNattIceServer__SWIG_2(string jarg1, string jarg2, ushort jarg3, bool jarg4, bool jarg5);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_addNattIceServer__SWIG_3")]
  public static extern bool CAEngine_addNattIceServer__SWIG_3(string jarg1, string jarg2, ushort jarg3, bool jarg4);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_addNattIceServer__SWIG_4")]
  public static extern bool CAEngine_addNattIceServer__SWIG_4(string jarg1, string jarg2, ushort jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_clearNattIceServers")]
  public static extern bool CAEngine_clearNattIceServers();

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setNattIceStunEnabled")]
  public static extern bool CAEngine_setNattIceStunEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_setNattIceTurnEnabled")]
  public static extern bool CAEngine_setNattIceTurnEnabled(bool jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingEvent__SWIG_0")]
  public static extern IntPtr new_CASignalingEvent__SWIG_0(int jarg1, string jarg2, IntPtr jarg3, uint jarg4);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingEvent__SWIG_1")]
  public static extern IntPtr new_CASignalingEvent__SWIG_1(int jarg1, string jarg2, IntPtr jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingEvent__SWIG_2")]
  public static extern IntPtr new_CASignalingEvent__SWIG_2(int jarg1, string jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingEvent")]
  public static extern void delete_CASignalingEvent(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_getObjectId")]
  public static extern string CASignalingEvent_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_getType")]
  public static extern int CASignalingEvent_getType(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_getDescription")]
  public static extern string CASignalingEvent_getDescription(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_getDataPtr")]
  public static extern IntPtr CASignalingEvent_getDataPtr(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_getDataSize")]
  public static extern uint CASignalingEvent_getDataSize(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_new_CASignalingCallEvent")]
  public static extern IntPtr new_CASignalingCallEvent(string jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingCallEvent")]
  public static extern void delete_CASignalingCallEvent(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getObjectId")]
  public static extern string CASignalingCallEvent_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getType")]
  public static extern string CASignalingCallEvent_getType(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getFrom")]
  public static extern string CASignalingCallEvent_getFrom(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getTo")]
  public static extern string CASignalingCallEvent_getTo(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getCallId")]
  public static extern string CASignalingCallEvent_getCallId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getTransacId")]
  public static extern string CASignalingCallEvent_getTransacId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_getSdp")]
  public static extern string CASignalingCallEvent_getSdp(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignalingCallback")]
  public static extern void delete_CASignalingCallback(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallback_onEventNet")]
  public static extern bool CASignalingCallback_onEventNet(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallback_onEventCall")]
  public static extern bool CASignalingCallback_onEventCall(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASignaling")]
  public static extern void delete_CASignaling(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_getObjectId")]
  public static extern string CASignaling_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_setCallback")]
  public static extern bool CASignaling_setCallback(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_isConnected")]
  public static extern bool CASignaling_isConnected(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_isReady")]
  public static extern bool CASignaling_isReady(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_connect")]
  public static extern bool CASignaling_connect(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_sendData")]
  public static extern bool CASignaling_sendData(HandleRef jarg1, IntPtr jarg2, uint jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_disConnect")]
  public static extern bool CASignaling_disConnect(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_newObj__SWIG_0")]
  public static extern IntPtr CASignaling_newObj__SWIG_0(string jarg1, string jarg2, string jarg3, string jarg4, ushort jarg5);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_newObj__SWIG_1")]
  public static extern IntPtr CASignaling_newObj__SWIG_1(string jarg1, string jarg2, string jarg3, string jarg4);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_newObj__SWIG_2")]
  public static extern IntPtr CASignaling_newObj__SWIG_2(string jarg1, string jarg2, string jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_getCredUserId")]
  public static extern string CASignaling_getCredUserId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_getCredPassword")]
  public static extern string CASignaling_getCredPassword(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASession")]
  public static extern void delete_CASession(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASession_getObjectId")]
  public static extern string CASession_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASession_getType")]
  public static extern int CASession_getType(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCallIceCallback_onStateChanged")]
  public static extern bool CASessionCallIceCallback_onStateChanged(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASessionCallIceCallback")]
  public static extern void delete_CASessionCallIceCallback(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_delete_CASessionCall")]
  public static extern void delete_CASessionCall(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_getObjectId")]
  public static extern string CASessionCall_getObjectId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setIceCallback")]
  public static extern bool CASessionCall_setIceCallback(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoDisplays__SWIG_0")]
  public static extern bool CASessionCall_setVideoDisplays__SWIG_0(HandleRef jarg1, int jarg2, long jarg3, long jarg4);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoDisplays__SWIG_1")]
  public static extern bool CASessionCall_setVideoDisplays__SWIG_1(HandleRef jarg1, int jarg2, long jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoDisplays__SWIG_2")]
  public static extern bool CASessionCall_setVideoDisplays__SWIG_2(HandleRef jarg1, int jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_call")]
  public static extern bool CASessionCall_call(HandleRef jarg1, int jarg2, string jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_acceptEvent")]
  public static extern bool CASessionCall_acceptEvent(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_rejectEvent")]
  public static extern bool CASessionCall_rejectEvent(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setMute__SWIG_0")]
  public static extern bool CASessionCall_setMute__SWIG_0(HandleRef jarg1, bool jarg2, int jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setMute__SWIG_1")]
  public static extern bool CASessionCall_setMute__SWIG_1(HandleRef jarg1, bool jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_hangup")]
  public static extern bool CASessionCall_hangup(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoFps__SWIG_0")]
  public static extern bool CASessionCall_setVideoFps__SWIG_0(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoFps__SWIG_1")]
  public static extern bool CASessionCall_setVideoFps__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoBandwidthUploadMax__SWIG_0")]
  public static extern bool CASessionCall_setVideoBandwidthUploadMax__SWIG_0(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoBandwidthUploadMax__SWIG_1")]
  public static extern bool CASessionCall_setVideoBandwidthUploadMax__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoBandwidthDownloadMax__SWIG_0")]
  public static extern bool CASessionCall_setVideoBandwidthDownloadMax__SWIG_0(HandleRef jarg1, int jarg2, int jarg3);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_setVideoBandwidthDownloadMax__SWIG_1")]
  public static extern bool CASessionCall_setVideoBandwidthDownloadMax__SWIG_1(HandleRef jarg1, int jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_getCallId")]
  public static extern string CASessionCall_getCallId(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_getMediaType")]
  public static extern int CASessionCall_getMediaType(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_getIceState")]
  public static extern int CASessionCall_getIceState(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_newObj__SWIG_0")]
  public static extern IntPtr CASessionCall_newObj__SWIG_0(HandleRef jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_newObj__SWIG_1")]
  public static extern IntPtr CASessionCall_newObj__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("clWRAP", EntryPoint="CSharp_CAEngine_SWIGUpcast")]
  public static extern IntPtr CAEngine_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingEvent_SWIGUpcast")]
  public static extern IntPtr CASignalingEvent_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallEvent_SWIGUpcast")]
  public static extern IntPtr CASignalingCallEvent_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignalingCallback_SWIGUpcast")]
  public static extern IntPtr CASignalingCallback_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASignaling_SWIGUpcast")]
  public static extern IntPtr CASignaling_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASession_SWIGUpcast")]
  public static extern IntPtr CASession_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCallIceCallback_SWIGUpcast")]
  public static extern IntPtr CASessionCallIceCallback_SWIGUpcast(IntPtr jarg1);

  [DllImport("clWRAP", EntryPoint="CSharp_CASessionCall_SWIGUpcast")]
  public static extern IntPtr CASessionCall_SWIGUpcast(IntPtr jarg1);
}

}
