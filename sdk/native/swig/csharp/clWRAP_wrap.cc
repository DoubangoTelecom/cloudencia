/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper
{
    struct SwigMovePointer {
        T *ptr;
        SwigMovePointer(T *p) : ptr(p) { }
        ~SwigMovePointer() {
            delete ptr;
        }
        SwigMovePointer& operator=(SwigMovePointer& rhs) {
            T* oldptr = ptr;
            ptr = 0;
            delete oldptr;
            ptr = rhs.ptr;
            rhs.ptr = 0;
            return *this;
        }
    } pointer;
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
    SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
    SwigValueWrapper() : pointer(0) { }
    SwigValueWrapper& operator=(const T& t) {
        SwigMovePointer tmp(new T(t));
        pointer = tmp;
        return *this;
    }
    operator T&() const {
        return *pointer.ptr;
    }
    T *operator&() {
        return pointer.ptr;
    }
};

template <typename T> T SwigValueInit()
{
    return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types:
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
    SWIG_CSharpApplicationException,
    SWIG_CSharpArithmeticException,
    SWIG_CSharpDivideByZeroException,
    SWIG_CSharpIndexOutOfRangeException,
    SWIG_CSharpInvalidCastException,
    SWIG_CSharpInvalidOperationException,
    SWIG_CSharpIOException,
    SWIG_CSharpNullReferenceException,
    SWIG_CSharpOutOfMemoryException,
    SWIG_CSharpOverflowException,
    SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
    SWIG_CSharpArgumentException,
    SWIG_CSharpArgumentNullException,
    SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
    SWIG_CSharpExceptionCodes code;
    SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
    SWIG_CSharpExceptionArgumentCodes code;
    SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
    { SWIG_CSharpApplicationException, NULL },
    { SWIG_CSharpArithmeticException, NULL },
    { SWIG_CSharpDivideByZeroException, NULL },
    { SWIG_CSharpIndexOutOfRangeException, NULL },
    { SWIG_CSharpInvalidCastException, NULL },
    { SWIG_CSharpInvalidOperationException, NULL },
    { SWIG_CSharpIOException, NULL },
    { SWIG_CSharpNullReferenceException, NULL },
    { SWIG_CSharpOutOfMemoryException, NULL },
    { SWIG_CSharpOverflowException, NULL },
    { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
    { SWIG_CSharpArgumentException, NULL },
    { SWIG_CSharpArgumentNullException, NULL },
    { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg)
{
    SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
    if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
        callback = SWIG_csharp_exceptions[code].callback;
    }
    callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name)
{
    SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
    if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
        callback = SWIG_csharp_exceptions_argument[code].callback;
    }
    callback(msg, param_name);
}


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_clWRAP(
    SWIG_CSharpExceptionCallback_t applicationCallback,
    SWIG_CSharpExceptionCallback_t arithmeticCallback,
    SWIG_CSharpExceptionCallback_t divideByZeroCallback,
    SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback,
    SWIG_CSharpExceptionCallback_t invalidCastCallback,
    SWIG_CSharpExceptionCallback_t invalidOperationCallback,
    SWIG_CSharpExceptionCallback_t ioCallback,
    SWIG_CSharpExceptionCallback_t nullReferenceCallback,
    SWIG_CSharpExceptionCallback_t outOfMemoryCallback,
    SWIG_CSharpExceptionCallback_t overflowCallback,
    SWIG_CSharpExceptionCallback_t systemCallback)
{
SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_clWRAP(
    SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
    SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
    SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback)
{
SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_clWRAP(SWIG_CSharpStringHelperCallback callback)
{
SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig
{
/* Director base class - not currently used in C# directors */
class Director
{
};

/* Base class for director exceptions */
class DirectorException
{
protected:
    std::string swig_msg;

public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
        return swig_msg;
    }
    virtual ~DirectorException() {
    }
};

/* Pure virtual method exception */
class DirectorPureVirtualException : public Swig::DirectorException
{
public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
};
}

#endif /* __cplusplus */



#include <stdint.h>		// Use the C99 official header


#include <string>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "clWRAP_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_delete_CAObj(void * jarg1)
{
    CAObj *arg1 = (CAObj *) 0 ;

    arg1 = (CAObj *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CAObj_getObjectId(void * jarg1)
{
    char * jresult ;
    CAObj *arg1 = (CAObj *) 0 ;
    char *result = 0 ;

    arg1 = (CAObj *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAObj_takeRef(void * jarg1)
{
    int jresult ;
    CAObj *arg1 = (CAObj *) 0 ;
    int result;

    arg1 = (CAObj *)jarg1;
    result = (int)(arg1)->takeRef();
    jresult = result;
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CAObj_releaseRef(void * jarg1)
{
    int jresult ;
    CAObj *arg1 = (CAObj *) 0 ;
    int result;

    arg1 = (CAObj *)jarg1;
    result = (int)(arg1)->releaseRef();
    jresult = result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    CAObjWrapper< CASignaling * > *result = 0 ;

    arg1 = (CASignaling *)jarg1;
    result = (CAObjWrapper< CASignaling * > *)new CAObjWrapper< CASignaling * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignaling * > *arg1 = 0 ;
    CAObjWrapper< CASignaling * > *result = 0 ;

    arg1 = (CAObjWrapper< CASignaling * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignaling * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASignaling * > *)new CAObjWrapper< CASignaling * >((CAObjWrapper< CASignaling * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingObj(void * jarg1)
{
    CAObjWrapper< CASignaling * > *arg1 = (CAObjWrapper< CASignaling * > *) 0 ;

    arg1 = (CAObjWrapper< CASignaling * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignalingObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignaling * > *arg1 = (CAObjWrapper< CASignaling * > *) 0 ;
    CASignaling *result = 0 ;

    arg1 = (CAObjWrapper< CASignaling * > *)jarg1;
    result = (CASignaling *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingCallbackObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASignalingCallback *arg1 = (CASignalingCallback *) 0 ;
    CAObjWrapper< CASignalingCallback * > *result = 0 ;

    arg1 = (CASignalingCallback *)jarg1;
    result = (CAObjWrapper< CASignalingCallback * > *)new CAObjWrapper< CASignalingCallback * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingCallbackObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingCallback * > *arg1 = 0 ;
    CAObjWrapper< CASignalingCallback * > *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingCallback * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallback * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASignalingCallback * > *)new CAObjWrapper< CASignalingCallback * >((CAObjWrapper< CASignalingCallback * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingCallbackObj(void * jarg1)
{
    CAObjWrapper< CASignalingCallback * > *arg1 = (CAObjWrapper< CASignalingCallback * > *) 0 ;

    arg1 = (CAObjWrapper< CASignalingCallback * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignalingCallbackObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingCallback * > *arg1 = (CAObjWrapper< CASignalingCallback * > *) 0 ;
    CASignalingCallback *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingCallback * > *)jarg1;
    result = (CASignalingCallback *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingEventObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    CAObjWrapper< CASignalingEvent * > *result = 0 ;

    arg1 = (CASignalingEvent *)jarg1;
    result = (CAObjWrapper< CASignalingEvent * > *)new CAObjWrapper< CASignalingEvent * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingEventObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingEvent * > *arg1 = 0 ;
    CAObjWrapper< CASignalingEvent * > *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingEvent * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingEvent * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASignalingEvent * > *)new CAObjWrapper< CASignalingEvent * >((CAObjWrapper< CASignalingEvent * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingEventObj(void * jarg1)
{
    CAObjWrapper< CASignalingEvent * > *arg1 = (CAObjWrapper< CASignalingEvent * > *) 0 ;

    arg1 = (CAObjWrapper< CASignalingEvent * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignalingEventObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingEvent * > *arg1 = (CAObjWrapper< CASignalingEvent * > *) 0 ;
    CASignalingEvent *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingEvent * > *)jarg1;
    result = (CASignalingEvent *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingCallEventObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    CAObjWrapper< CASignalingCallEvent * > *result = 0 ;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (CAObjWrapper< CASignalingCallEvent * > *)new CAObjWrapper< CASignalingCallEvent * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingCallEventObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingCallEvent * > *arg1 = 0 ;
    CAObjWrapper< CASignalingCallEvent * > *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingCallEvent * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallEvent * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASignalingCallEvent * > *)new CAObjWrapper< CASignalingCallEvent * >((CAObjWrapper< CASignalingCallEvent * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingCallEventObj(void * jarg1)
{
    CAObjWrapper< CASignalingCallEvent * > *arg1 = (CAObjWrapper< CASignalingCallEvent * > *) 0 ;

    arg1 = (CAObjWrapper< CASignalingCallEvent * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignalingCallEventObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASignalingCallEvent * > *arg1 = (CAObjWrapper< CASignalingCallEvent * > *) 0 ;
    CASignalingCallEvent *result = 0 ;

    arg1 = (CAObjWrapper< CASignalingCallEvent * > *)jarg1;
    result = (CASignalingCallEvent *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASessionCallObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAObjWrapper< CASessionCall * > *result = 0 ;

    arg1 = (CASessionCall *)jarg1;
    result = (CAObjWrapper< CASessionCall * > *)new CAObjWrapper< CASessionCall * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASessionCallObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASessionCall * > *arg1 = 0 ;
    CAObjWrapper< CASessionCall * > *result = 0 ;

    arg1 = (CAObjWrapper< CASessionCall * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASessionCall * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASessionCall * > *)new CAObjWrapper< CASessionCall * >((CAObjWrapper< CASessionCall * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASessionCallObj(void * jarg1)
{
    CAObjWrapper< CASessionCall * > *arg1 = (CAObjWrapper< CASessionCall * > *) 0 ;

    arg1 = (CAObjWrapper< CASessionCall * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASessionCallObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASessionCall * > *arg1 = (CAObjWrapper< CASessionCall * > *) 0 ;
    CASessionCall *result = 0 ;

    arg1 = (CAObjWrapper< CASessionCall * > *)jarg1;
    result = (CASessionCall *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASessionCallIceCallbackObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    CASessionCallIceCallback *arg1 = (CASessionCallIceCallback *) 0 ;
    CAObjWrapper< CASessionCallIceCallback * > *result = 0 ;

    arg1 = (CASessionCallIceCallback *)jarg1;
    result = (CAObjWrapper< CASessionCallIceCallback * > *)new CAObjWrapper< CASessionCallIceCallback * >(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASessionCallIceCallbackObj__SWIG_1(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASessionCallIceCallback * > *arg1 = 0 ;
    CAObjWrapper< CASessionCallIceCallback * > *result = 0 ;

    arg1 = (CAObjWrapper< CASessionCallIceCallback * > *)jarg1;
    if (!arg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASessionCallIceCallback * > const & type is null", 0);
        return 0;
    }
    result = (CAObjWrapper< CASessionCallIceCallback * > *)new CAObjWrapper< CASessionCallIceCallback * >((CAObjWrapper< CASessionCallIceCallback * > const &)*arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASessionCallIceCallbackObj(void * jarg1)
{
    CAObjWrapper< CASessionCallIceCallback * > *arg1 = (CAObjWrapper< CASessionCallIceCallback * > *) 0 ;

    arg1 = (CAObjWrapper< CASessionCallIceCallback * > *)jarg1;
    delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASessionCallIceCallbackObj_unWrap(void * jarg1)
{
    void * jresult ;
    CAObjWrapper< CASessionCallIceCallback * > *arg1 = (CAObjWrapper< CASessionCallIceCallback * > *) 0 ;
    CASessionCallIceCallback *result = 0 ;

    arg1 = (CAObjWrapper< CASessionCallIceCallback * > *)jarg1;
    result = (CASessionCallIceCallback *)(arg1)->unWrap();
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CAEngine(void * jarg1)
{
    CAEngine *arg1 = (CAEngine *) 0 ;

    arg1 = (CAEngine *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CAEngine_getObjectId(void * jarg1)
{
    char * jresult ;
    CAEngine *arg1 = (CAEngine *) 0 ;
    char *result = 0 ;

    arg1 = (CAEngine *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_init()
{
    unsigned int jresult ;
    bool result;

    result = (bool)CAEngine::init();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_deInit()
{
    unsigned int jresult ;
    bool result;

    result = (bool)CAEngine::deInit();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_isInitialized()
{
    unsigned int jresult ;
    bool result;

    result = (bool)CAEngine::isInitialized();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setDebugLevel(int jarg1)
{
    unsigned int jresult ;
    CADebugLevel_t arg1 ;
    bool result;

    arg1 = (CADebugLevel_t)jarg1;
    result = (bool)CAEngine::setDebugLevel(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setSSLCertificates__SWIG_0(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    bool arg4 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    arg4 = jarg4 ? true : false;
    result = (bool)CAEngine::setSSLCertificates(arg1,arg2,arg3,arg4);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setSSLCertificates__SWIG_1(char * jarg1, char * jarg2, char * jarg3)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    result = (bool)CAEngine::setSSLCertificates(arg1,arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoPrefSize(char * jarg1)
{
    unsigned int jresult ;
    std::string arg1 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    result = (bool)CAEngine::setVideoPrefSize(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoFps(int jarg1)
{
    unsigned int jresult ;
    int arg1 ;
    bool result;

    arg1 = (int)jarg1;
    result = (bool)CAEngine::setVideoFps(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoBandwidthUpMax(int jarg1)
{
    unsigned int jresult ;
    int arg1 ;
    bool result;

    arg1 = (int)jarg1;
    result = (bool)CAEngine::setVideoBandwidthUpMax(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoBandwidthDownMax(int jarg1)
{
    unsigned int jresult ;
    int arg1 ;
    bool result;

    arg1 = (int)jarg1;
    result = (bool)CAEngine::setVideoBandwidthDownMax(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoMotionRank(int jarg1)
{
    unsigned int jresult ;
    int arg1 ;
    bool result;

    arg1 = (int)jarg1;
    result = (bool)CAEngine::setVideoMotionRank(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoCongestionCtrlEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setVideoCongestionCtrlEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoJbEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setVideoJbEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoAvpfTail(int jarg1, int jarg2)
{
    unsigned int jresult ;
    int arg1 ;
    int arg2 ;
    bool result;

    arg1 = (int)jarg1;
    arg2 = (int)jarg2;
    result = (bool)CAEngine::setVideoAvpfTail(arg1,arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setVideoZeroArtifactsEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setVideoZeroArtifactsEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setAudioEchoSuppEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setAudioEchoSuppEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setAudioEchoTail(int jarg1)
{
    unsigned int jresult ;
    int arg1 ;
    bool result;

    arg1 = (int)jarg1;
    result = (bool)CAEngine::setAudioEchoTail(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_addNattIceServer__SWIG_0(char * jarg1, char * jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6, char * jarg7)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    unsigned short arg3 ;
    bool arg4 ;
    bool arg5 ;
    std::string arg6 ;
    std::string arg7 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = (unsigned short)jarg3;
    arg4 = jarg4 ? true : false;
    arg5 = jarg5 ? true : false;
    if (!jarg6) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg6)->assign(jarg6);
    if (!jarg7) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg7)->assign(jarg7);
    result = (bool)CAEngine::addNattIceServer(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_addNattIceServer__SWIG_1(char * jarg1, char * jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5, char * jarg6)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    unsigned short arg3 ;
    bool arg4 ;
    bool arg5 ;
    std::string arg6 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = (unsigned short)jarg3;
    arg4 = jarg4 ? true : false;
    arg5 = jarg5 ? true : false;
    if (!jarg6) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg6)->assign(jarg6);
    result = (bool)CAEngine::addNattIceServer(arg1,arg2,arg3,arg4,arg5,arg6);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_addNattIceServer__SWIG_2(char * jarg1, char * jarg2, unsigned short jarg3, unsigned int jarg4, unsigned int jarg5)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    unsigned short arg3 ;
    bool arg4 ;
    bool arg5 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = (unsigned short)jarg3;
    arg4 = jarg4 ? true : false;
    arg5 = jarg5 ? true : false;
    result = (bool)CAEngine::addNattIceServer(arg1,arg2,arg3,arg4,arg5);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_addNattIceServer__SWIG_3(char * jarg1, char * jarg2, unsigned short jarg3, unsigned int jarg4)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    unsigned short arg3 ;
    bool arg4 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = (unsigned short)jarg3;
    arg4 = jarg4 ? true : false;
    result = (bool)CAEngine::addNattIceServer(arg1,arg2,arg3,arg4);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_addNattIceServer__SWIG_4(char * jarg1, char * jarg2, unsigned short jarg3)
{
    unsigned int jresult ;
    std::string arg1 ;
    std::string arg2 ;
    unsigned short arg3 ;
    bool result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = (unsigned short)jarg3;
    result = (bool)CAEngine::addNattIceServer(arg1,arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_clearNattIceServers()
{
    unsigned int jresult ;
    bool result;

    result = (bool)CAEngine::clearNattIceServers();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setNattIceStunEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setNattIceStunEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CAEngine_setNattIceTurnEnabled(unsigned int jarg1)
{
    unsigned int jresult ;
    bool arg1 ;
    bool result;

    arg1 = jarg1 ? true : false;
    result = (bool)CAEngine::setNattIceTurnEnabled(arg1);
    jresult = result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingEvent__SWIG_0(int jarg1, char * jarg2, void * jarg3, unsigned long jarg4)
{
    void * jresult ;
    CASignalingEventType_t arg1 ;
    std::string arg2 ;
    void *arg3 = (void *) 0 ;
    size_t arg4 ;
    CASignalingEvent *result = 0 ;

    arg1 = (CASignalingEventType_t)jarg1;
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = jarg3;
    arg4 = (size_t)jarg4;
    result = (CASignalingEvent *)new CASignalingEvent(arg1,arg2,(void const *)arg3,arg4);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingEvent__SWIG_1(int jarg1, char * jarg2, void * jarg3)
{
    void * jresult ;
    CASignalingEventType_t arg1 ;
    std::string arg2 ;
    void *arg3 = (void *) 0 ;
    CASignalingEvent *result = 0 ;

    arg1 = (CASignalingEventType_t)jarg1;
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    arg3 = jarg3;
    result = (CASignalingEvent *)new CASignalingEvent(arg1,arg2,(void const *)arg3);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingEvent__SWIG_2(int jarg1, char * jarg2)
{
    void * jresult ;
    CASignalingEventType_t arg1 ;
    std::string arg2 ;
    CASignalingEvent *result = 0 ;

    arg1 = (CASignalingEventType_t)jarg1;
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    result = (CASignalingEvent *)new CASignalingEvent(arg1,arg2);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingEvent(void * jarg1)
{
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;

    arg1 = (CASignalingEvent *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingEvent_getObjectId(void * jarg1)
{
    char * jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    char *result = 0 ;

    arg1 = (CASignalingEvent *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASignalingEvent_getType(void * jarg1)
{
    int jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    CASignalingEventType_t result;

    arg1 = (CASignalingEvent *)jarg1;
    result = (CASignalingEventType_t)((CASignalingEvent const *)arg1)->getType();
    jresult = result;
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingEvent_getDescription(void * jarg1)
{
    char * jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingEvent *)jarg1;
    result = ((CASignalingEvent const *)arg1)->getDescription();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignalingEvent_getDataPtr(void * jarg1)
{
    void * jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    void *result = 0 ;

    arg1 = (CASignalingEvent *)jarg1;
    result = (void *)((CASignalingEvent const *)arg1)->getDataPtr();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CASignalingEvent_getDataSize(void * jarg1)
{
    unsigned long jresult ;
    CASignalingEvent *arg1 = (CASignalingEvent *) 0 ;
    size_t result;

    arg1 = (CASignalingEvent *)jarg1;
    result = ((CASignalingEvent const *)arg1)->getDataSize();
    jresult = (unsigned long)result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CASignalingCallEvent(char * jarg1)
{
    void * jresult ;
    std::string arg1 ;
    CASignalingCallEvent *result = 0 ;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    result = (CASignalingCallEvent *)new CASignalingCallEvent(arg1);
    jresult = (void *)result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingCallEvent(void * jarg1)
{
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;

    arg1 = (CASignalingCallEvent *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getObjectId(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    char *result = 0 ;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getType(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getType();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getFrom(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getFrom();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getTo(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getTo();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getCallId(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getCallId();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getTransacId(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getTransacId();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignalingCallEvent_getSdp(void * jarg1)
{
    char * jresult ;
    CASignalingCallEvent *arg1 = (CASignalingCallEvent *) 0 ;
    std::string result;

    arg1 = (CASignalingCallEvent *)jarg1;
    result = (arg1)->getSdp();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignalingCallback(void * jarg1)
{
    CASignalingCallback *arg1 = (CASignalingCallback *) 0 ;

    arg1 = (CASignalingCallback *)jarg1;
    delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignalingCallback_onEventNet(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASignalingCallback *arg1 = (CASignalingCallback *) 0 ;
    CAObjWrapper< CASignalingEvent * > *arg2 = 0 ;
    bool result;

    arg1 = (CASignalingCallback *)jarg1;
    arg2 = (CAObjWrapper< CASignalingEvent * > *)jarg2;
    if (!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingEvent * > & type is null", 0);
        return 0;
    }
    result = (bool)(arg1)->onEventNet(*arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignalingCallback_onEventCall(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASignalingCallback *arg1 = (CASignalingCallback *) 0 ;
    CAObjWrapper< CASignalingCallEvent * > *arg2 = 0 ;
    bool result;

    arg1 = (CASignalingCallback *)jarg1;
    arg2 = (CAObjWrapper< CASignalingCallEvent * > *)jarg2;
    if (!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallEvent * > & type is null", 0);
        return 0;
    }
    result = (bool)(arg1)->onEventCall(*arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASignaling(void * jarg1)
{
    CASignaling *arg1 = (CASignaling *) 0 ;

    arg1 = (CASignaling *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignaling_getObjectId(void * jarg1)
{
    char * jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    char *result = 0 ;

    arg1 = (CASignaling *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_setCallback(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    SwigValueWrapper< CAObjWrapper< CASignalingCallback * > > arg2 ;
    CAObjWrapper< CASignalingCallback * > *argp2 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    argp2 = (CAObjWrapper< CASignalingCallback * > *)jarg2;
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASignalingCallback * >", 0);
        return 0;
    }
    arg2 = *argp2;
    result = (bool)(arg1)->setCallback(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_isConnected(void * jarg1)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    result = (bool)(arg1)->isConnected();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_isReady(void * jarg1)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    result = (bool)(arg1)->isReady();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_connect(void * jarg1)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    result = (bool)(arg1)->connect();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_sendData(void * jarg1, void * jarg2, unsigned long jarg3)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    void *arg2 = (void *) 0 ;
    size_t arg3 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    arg2 = jarg2;
    arg3 = (size_t)jarg3;
    result = (bool)(arg1)->sendData((void const *)arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASignaling_disConnect(void * jarg1)
{
    unsigned int jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    bool result;

    arg1 = (CASignaling *)jarg1;
    result = (bool)(arg1)->disConnect();
    jresult = result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignaling_newObj__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned short jarg5)
{
    void * jresult ;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    unsigned short arg5 ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    if (!jarg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg4)->assign(jarg4);
    arg5 = (unsigned short)jarg5;
    result = CASignaling::newObj(arg1,arg2,arg3,arg4,arg5);
    jresult = new CAObjWrapper< CASignaling * >((const CAObjWrapper< CASignaling * > &)result);
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignaling_newObj__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4)
{
    void * jresult ;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    std::string arg4 ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    if (!jarg4) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg4)->assign(jarg4);
    result = CASignaling::newObj(arg1,arg2,arg3,arg4);
    jresult = new CAObjWrapper< CASignaling * >((const CAObjWrapper< CASignaling * > &)result);
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASignaling_newObj__SWIG_2(char * jarg1, char * jarg2, char * jarg3)
{
    void * jresult ;
    std::string arg1 ;
    std::string arg2 ;
    std::string arg3 ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > result;

    if (!jarg1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg1)->assign(jarg1);
    if (!jarg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg2)->assign(jarg2);
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    result = CASignaling::newObj(arg1,arg2,arg3);
    jresult = new CAObjWrapper< CASignaling * >((const CAObjWrapper< CASignaling * > &)result);
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignaling_getCredUserId(void * jarg1)
{
    char * jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    std::string result;

    arg1 = (CASignaling *)jarg1;
    result = (arg1)->getCredUserId();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASignaling_getCredPassword(void * jarg1)
{
    char * jresult ;
    CASignaling *arg1 = (CASignaling *) 0 ;
    std::string result;

    arg1 = (CASignaling *)jarg1;
    result = (arg1)->getCredPassword();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASession(void * jarg1)
{
    CASession *arg1 = (CASession *) 0 ;

    arg1 = (CASession *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASession_getObjectId(void * jarg1)
{
    char * jresult ;
    CASession *arg1 = (CASession *) 0 ;
    char *result = 0 ;

    arg1 = (CASession *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASession_getType(void * jarg1)
{
    int jresult ;
    CASession *arg1 = (CASession *) 0 ;
    CASessionType_t result;

    arg1 = (CASession *)jarg1;
    result = (CASessionType_t)((CASession const *)arg1)->getType();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCallIceCallback_onStateChanged(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASessionCallIceCallback *arg1 = (CASessionCallIceCallback *) 0 ;
    SwigValueWrapper< CAObjWrapper< CASessionCall * > > arg2 ;
    CAObjWrapper< CASessionCall * > *argp2 ;
    bool result;

    arg1 = (CASessionCallIceCallback *)jarg1;
    argp2 = (CAObjWrapper< CASessionCall * > *)jarg2;
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASessionCall * >", 0);
        return 0;
    }
    arg2 = *argp2;
    result = (bool)(arg1)->onStateChanged(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASessionCallIceCallback(void * jarg1)
{
    CASessionCallIceCallback *arg1 = (CASessionCallIceCallback *) 0 ;

    arg1 = (CASessionCallIceCallback *)jarg1;
    delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CASessionCall(void * jarg1)
{
    CASessionCall *arg1 = (CASessionCall *) 0 ;

    arg1 = (CASessionCall *)jarg1;
    delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASessionCall_getObjectId(void * jarg1)
{
    char * jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    char *result = 0 ;

    arg1 = (CASessionCall *)jarg1;
    result = (char *)(arg1)->getObjectId();
    jresult = SWIG_csharp_string_callback((const char *)result);
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setIceCallback(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    SwigValueWrapper< CAObjWrapper< CASessionCallIceCallback * > > arg2 ;
    CAObjWrapper< CASessionCallIceCallback * > *argp2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    argp2 = (CAObjWrapper< CASessionCallIceCallback * > *)jarg2;
    if (!argp2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASessionCallIceCallback * >", 0);
        return 0;
    }
    arg2 = *argp2;
    result = (bool)(arg1)->setIceCallback(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoDisplays__SWIG_0(void * jarg1, int jarg2, long long jarg3, long long jarg4)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAMediaType_t arg2 ;
    int64_t arg3 ;
    int64_t arg4 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (CAMediaType_t)jarg2;
    arg3 = (int64_t)jarg3;
    arg4 = (int64_t)jarg4;
    result = (bool)(arg1)->setVideoDisplays(arg2,arg3,arg4);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoDisplays__SWIG_1(void * jarg1, int jarg2, long long jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAMediaType_t arg2 ;
    int64_t arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (CAMediaType_t)jarg2;
    arg3 = (int64_t)jarg3;
    result = (bool)(arg1)->setVideoDisplays(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoDisplays__SWIG_2(void * jarg1, int jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAMediaType_t arg2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (CAMediaType_t)jarg2;
    result = (bool)(arg1)->setVideoDisplays(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_call(void * jarg1, int jarg2, char * jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAMediaType_t arg2 ;
    std::string arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (CAMediaType_t)jarg2;
    if (!jarg3) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
        return 0;
    }
    (&arg3)->assign(jarg3);
    result = (bool)(arg1)->call(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_acceptEvent(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAObjWrapper< CASignalingCallEvent * > *arg2 = 0 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (CAObjWrapper< CASignalingCallEvent * > *)jarg2;
    if (!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallEvent * > & type is null", 0);
        return 0;
    }
    result = (bool)(arg1)->acceptEvent(*arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_rejectEvent(void * jarg1, void * jarg2)
{
    unsigned int jresult ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > arg1 ;
    CAObjWrapper< CASignalingCallEvent * > *arg2 = 0 ;
    CAObjWrapper< CASignaling * > *argp1 ;
    bool result;

    argp1 = (CAObjWrapper< CASignaling * > *)jarg1;
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASignaling * >", 0);
        return 0;
    }
    arg1 = *argp1;
    arg2 = (CAObjWrapper< CASignalingCallEvent * > *)jarg2;
    if (!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallEvent * > & type is null", 0);
        return 0;
    }
    result = (bool)CASessionCall::rejectEvent(arg1,*arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setMute__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    bool arg2 ;
    CAMediaType_t arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = jarg2 ? true : false;
    arg3 = (CAMediaType_t)jarg3;
    result = (bool)(arg1)->setMute(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setMute__SWIG_1(void * jarg1, unsigned int jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    bool arg2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = jarg2 ? true : false;
    result = (bool)(arg1)->setMute(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_hangup(void * jarg1)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    result = (bool)(arg1)->hangup();
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoFps__SWIG_0(void * jarg1, int jarg2, int jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    CAMediaType_t arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    arg3 = (CAMediaType_t)jarg3;
    result = (bool)(arg1)->setVideoFps(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoFps__SWIG_1(void * jarg1, int jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    result = (bool)(arg1)->setVideoFps(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoBandwidthUploadMax__SWIG_0(void * jarg1, int jarg2, int jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    CAMediaType_t arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    arg3 = (CAMediaType_t)jarg3;
    result = (bool)(arg1)->setVideoBandwidthUploadMax(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoBandwidthUploadMax__SWIG_1(void * jarg1, int jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    result = (bool)(arg1)->setVideoBandwidthUploadMax(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoBandwidthDownloadMax__SWIG_0(void * jarg1, int jarg2, int jarg3)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    CAMediaType_t arg3 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    arg3 = (CAMediaType_t)jarg3;
    result = (bool)(arg1)->setVideoBandwidthDownloadMax(arg2,arg3);
    jresult = result;
    return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CASessionCall_setVideoBandwidthDownloadMax__SWIG_1(void * jarg1, int jarg2)
{
    unsigned int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    int arg2 ;
    bool result;

    arg1 = (CASessionCall *)jarg1;
    arg2 = (int)jarg2;
    result = (bool)(arg1)->setVideoBandwidthDownloadMax(arg2);
    jresult = result;
    return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CASessionCall_getCallId(void * jarg1)
{
    char * jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    std::string result;

    arg1 = (CASessionCall *)jarg1;
    result = (arg1)->getCallId();
    jresult = SWIG_csharp_string_callback((&result)->c_str());
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASessionCall_getMediaType(void * jarg1)
{
    int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    CAMediaType_t result;

    arg1 = (CASessionCall *)jarg1;
    result = (CAMediaType_t)(arg1)->getMediaType();
    jresult = result;
    return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CASessionCall_getIceState(void * jarg1)
{
    int jresult ;
    CASessionCall *arg1 = (CASessionCall *) 0 ;
    enum CAIceState_e result;

    arg1 = (CASessionCall *)jarg1;
    result = (enum CAIceState_e)(arg1)->getIceState();
    jresult = result;
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASessionCall_newObj__SWIG_0(void * jarg1)
{
    void * jresult ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > arg1 ;
    CAObjWrapper< CASignaling * > *argp1 ;
    SwigValueWrapper< CAObjWrapper< CASessionCall * > > result;

    argp1 = (CAObjWrapper< CASignaling * > *)jarg1;
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASignaling * >", 0);
        return 0;
    }
    arg1 = *argp1;
    result = CASessionCall::newObj(arg1);
    jresult = new CAObjWrapper< CASessionCall * >((const CAObjWrapper< CASessionCall * > &)result);
    return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CASessionCall_newObj__SWIG_1(void * jarg1, void * jarg2)
{
    void * jresult ;
    SwigValueWrapper< CAObjWrapper< CASignaling * > > arg1 ;
    CAObjWrapper< CASignalingCallEvent * > *arg2 = 0 ;
    CAObjWrapper< CASignaling * > *argp1 ;
    SwigValueWrapper< CAObjWrapper< CASessionCall * > > result;

    argp1 = (CAObjWrapper< CASignaling * > *)jarg1;
    if (!argp1) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CAObjWrapper< CASignaling * >", 0);
        return 0;
    }
    arg1 = *argp1;
    arg2 = (CAObjWrapper< CASignalingCallEvent * > *)jarg2;
    if (!arg2) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CAObjWrapper< CASignalingCallEvent * > & type is null", 0);
        return 0;
    }
    result = CASessionCall::newObj(arg1,*arg2);
    jresult = new CAObjWrapper< CASessionCall * >((const CAObjWrapper< CASessionCall * > &)result);
    return jresult;
}


SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CAEngine_SWIGUpcast(CAEngine *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CASignalingEvent_SWIGUpcast(CASignalingEvent *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CASignalingEvent * SWIGSTDCALL CSharp_CASignalingCallEvent_SWIGUpcast(CASignalingCallEvent *jarg1)
{
    return (CASignalingEvent *)jarg1;
}

SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CASignalingCallback_SWIGUpcast(CASignalingCallback *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CASignaling_SWIGUpcast(CASignaling *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CASession_SWIGUpcast(CASession *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CAObj * SWIGSTDCALL CSharp_CASessionCallIceCallback_SWIGUpcast(CASessionCallIceCallback *jarg1)
{
    return (CAObj *)jarg1;
}

SWIGEXPORT CASession * SWIGSTDCALL CSharp_CASessionCall_SWIGUpcast(CASessionCall *jarg1)
{
    return (CASession *)jarg1;
}

#ifdef __cplusplus
}
#endif

